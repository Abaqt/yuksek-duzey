import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Generate Synthetic Sales Data
np.random.seed(42)  # For reproducibility
days = np.array(range(1, 101))  # 100 days
sales = 100 + days * 3 + np.random.normal(0, 10, size=100)  # Sales trend with noise

# Create a DataFrame
data = pd.DataFrame({"Day": days, "Sales": sales})

# Step 2: Prepare Data for Model
X = data["Day"].values.reshape(-1, 1)  # Predictor
y = data["Sales"].values  # Target

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Make Predictions
y_pred = model.predict(X_test)

# Predict future sales for the next 30 days
future_days = np.array(range(101, 131)).reshape(-1, 1)
future_sales = model.predict(future_days)

# Step 5: Evaluate Model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Display Metrics
print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")

# Step 6: Visualize Results
plt.figure(figsize=(10, 6))
# Historical data
plt.scatter(data["Day"], data["Sales"], label="Historical Sales", color="blue")
# Predictions on test data
plt.scatter(X_test, y_pred, label="Predicted Test Sales", color="green")
# Future predictions
plt.plot(range(101, 131), future_sales, label="Future Sales Prediction", color="red", linestyle="--")
plt.title("Sales Prediction")
plt.xlabel("Day")
plt.ylabel("Sales")
plt.legend()
plt.grid(True)
plt.show()
